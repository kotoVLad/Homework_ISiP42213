Введение
Современная индустрия не стоит на месте, как и развитие аниме культуры, от чего появляются новые «Аниме», «Игры», «Манги» и «Новеллы».
Данная работа посвящена разработки Web-сайта «Магазин аниме товаров», состоящая из клиентской части, Web-сервера, базы данных.
Клиентская часть будет включать в себя следующие функции: 
•	Форма регистрации пользователя.
•	Форма авторизации пользователя.
•	Окно Админа.
•	Окно продавца.
•	Форма оплаты заказа.
•	Корзина.
Клиентская часть будет включать в себя следующие функции: 
•	Принятие запросов пользователей.
•	Обработка данных.
•	Выдавать результаты запросов.
База данных будет состоять из таблиц:
•	Данные пользователей.
•	Данные заказа.
•	Данные товара.
Актуальность темы в том, что наше время много людей, которые любят «Аниме», от чего появляется потребность товаров с «Аниме атрибутикой». Поэтому они обращаются к интернет-магазинам, чтобы купить тот или иной товар.
Цель работы является разработка Web-магазин по продажам товаров с Аниме атрибутикой.
 
Для реализации этой цели были поставлены следующие задачи:
1.	Изучить дизайн популярных Web-магазинов, а также, в частности, аниме сайтов, чтобы сделать современный дизайн магазина.
2.	Выбрать подходящие инструменты по создание Web-сервера, Web-магазина.
3.	Выбрать подходящие инструменты для хранения данных пользователя.
 
I. ТЕОРЕТИЧЕСКИЕ СВЕДЕНИЯ
1.1	История появления Аниме.
Чтобы понять аниме, необходимо обратиться к его истокам. Представьте себе Японию в начале XX века. Страна, стремительно меняющаяся под влиянием Запада, но трепетно охраняющая свою культуру и традиции. В воздухе витает дух новаторства, а умы художников бурлят идеями. В этой атмосфере рождается нечто совершенно новое — зачатки того, что мы сегодня знаем как аниме.
Отправной точкой можно считать период с 1907 по 1917 годы. В те времена в Японии стали появляться первые короткометражные анимационные фильмы. Один из них, не имеющий названия, можно найти в интернете по словам Katsudō Shashin, что означает «движущиеся изображения». Фильм длится всего три секунды. В нем мальчик в матроске пишет на доске фразу «Движущиеся изображения», затем поворачивается к зрителю и снимает шляпу.
Среди тех, кто осмелился вступить на неизведанную территорию анимации, особо выделяются три имени: Отэн Шимокава, Дзюнъити Коути и Сэитаро Китаяма. Они — пионеры, чьи имена навсегда вписаны в историю аниме.
Подлинным отцом основателем аниме принято считать Осаму Тэдзуку. Его работа ознаменовала расцвет аниме, который начался в 1960 е годы благодаря гению Осаму, которого часто называют «богом манги» и «отцом аниме». Тэдзука совершил настоящую революцию в анимации, разработав узнаваемый стиль, характеризующийся большими глазами персонажей и упрощенными чертами лица. Он также внедрил новые методы производства, позволившие значительно сократить затраты и время создания анимационных фильмов.
В 1963 году Тэдзука основал студию Mushi Production и выпустил «Могучий Атом» (он же «Астробой») – первый аниме сериал, получивший огромную популярность в Японии и за рубежом. Это шоу рассказывало историю мальчика робота, созданного ученым, потерявшим своего сына. Сериал поднимал важные темы, такие как ответственность за свои творения, искусственный интеллект и место человека в мире технологий.
Его успех проложил путь для других аниме сериалов, таких как «Кимба, Белый лев» (Kimba the White Lion), «Морской мальчик» (Marine Boy) и «Гонщик Спиди» (Speed Racer). Именно в этот период японская анимация начинает формировать свой уникальный стиль, отходя от прямого копирования западных образцов и находя собственный голос.
В 1980 е годы аниме переживает период качественного скачка, превращаясь из развлечения в мощное средство выражения глубоких мыслей и чувств. Сериал «Мобильный воин Гандам» (1979) выходит за рамки жанра меха, смело затрагивая сложные социальные, политические и философские темы.
А фильмы Хаяо Миядзаки, в особенности «Навсикая из Долины ветров» (1984), пронизанные трепетной любовью к природе и глубокой тревогой за будущее планеты, раскрывают миру способность аниме не только развлекать, но и побуждать к размышлениям о важнейших проблемах, стоящих перед человечеством.
Эти знаковые произведения стали настоящими культурными феноменами, оказавшими огромное влияние на другие виды искусства и сформировавшими мировоззрение целых поколений.
1.2	 Серверная часть.
Для создания Веб-приложения и Веб-сервера будет использоваться Node.JS, так как мы в техникуме изучали JavaScript (JS).
 	JavaScript (JS) — это язык программирования, который в первую очередь применяют в вебе. С его помощью сайты делают интерактивными: добавляют всплывающие окна, анимацию, кнопки лайков и формы для отправки информации. Его ещё называют главным языком фронтенда — «лицевой» стороны сайта, с которой взаимодействуют пользователи.
Node.JS (Node) — это платформа с открытым исходным кодом для работы с языком JavaScript, построенная на движке Chrome V8. Она позволяет писать серверный код для веб-приложений и динамических веб-страниц, а также программ командной строки. В основе платформы — событийно-управляемая модель с неблокирующими операциями ввода-вывода, что делает ее эффективной и легкой.
Ещё чем меня привлёк Node.js:
•	Высокая скорость. JavaScript-код, который выполняется в среде Node.js, может быть в несколько раз быстрее, чем написанный на языках вроде Ruby или Python. В Node.js используется модель асинхронного программирования. Модель позволяет продолжить обработку других задач, не дожидаясь завершения передачи данных. Когда требуется выполнить операцию ввода-вывода вроде доступа к файловой системе или базе данных, Node.js не блокирует главный поток ожиданием результатов. Платформа инициирует ее выполнение и продолжает выполнять другие задачи, пока результаты предыдущей операции не будут получены.
•	Универсальность и гибкость. В Node.js выполняется код, который написан на JavaScript. Это означает, что frontend-разработчики, которые уже используют JavaScript в браузере, могут писать и клиентский, и серверный код на привычном языке программирования, не изучая инструмент с нуля. В Node.js можно быстро переходить на новые стандарты ECMAScript по мере их реализации. Новые возможности языка становятся доступны сразу после установки поддерживающей их версии Node.js.
•	Большое количество модулей и библиотек. Экосистема Node.js стремительно развивается благодаря менеджеру пакетов NPM. Он содержит более 500 000 модулей и библиотек open-source, которые находятся в свободном доступе. Также постоянно появляются новые.
Для разработки веб-приложения будет использован EJS - это простой и популярный шаблонизатор для Node.js, который позволяет встраивать JavaScript код прямо в HTML. Он идеально подходит для быстрого и эффективного создания динамических страниц.
Так же мне понадобится Express. Express в Node.js нужен для упрощения разработки веб-приложений на базе этой среды. Он предоставляет набор функций для создания веб- и мобильных приложений. 
Некоторые возможности Express:
•	Настройка посредников для ответа на запросы HTTP. 
•	Определение таблицы маршрутизации для выполнения различных действий на основе метода HTTP и URL-адреса. 
•	Динамическое создание HTML-страниц на основе передачи аргументов шаблонам. 
•	Интеграция решений, таких как аутентификация, обработка ошибок и работа с базами данных.
Для хранения данных пользователя на сервере будет использоваться Express-session. Express-session в Node.js нужен для управления сессиями — хранения данных пользователя на сервере, которые не теряются при переходе на другую страницу.
Некоторые задачи, для которых используется express-session:
•	Безопасное хранение чувствительных данных. Например, идентификатора пользователя. 
•	Эффективное и безопасное хранение глобальных переменных. Это полезно, например, при создании приложений, которые нуждаются во временном хранении данных объёмом более 4 КБ. 
•	Замена cookies на платформах, которые их не поддерживают.  
•	Реализация таких функций, как системы входа пользователей, корзины покупок и другие, где серверу нужно помнить информацию, специфичную для пользователя. 
Почему выбрал Express-session, а не Cookie файлы?
> Express-session хранит данные сеанса на сервере, при этом в файле cookie на стороне клиента сохраняется только идентификатор сеанса, а не сами данные. Express-session может использовать настраиваемые бэкенды, начиная от памяти и заканчивая любым количеством баз данных, что обеспечивает практически неограниченное хранение сеанса. 
> Cookies хранят данные сеанса на стороне клиента в файле cookie. Объём памяти сеанса ограничен размером файла cookie, обычно чуть менее 4 тыс. байт. Cookies полезны в приложениях, где серверная часть не использует базу данных. 
Ещё несколько их отличий:
Производительность: session работает медленнее из-за взаимодействия с сервером, cookies — быстрее, так как данные хранятся локально. 
Безопасность: session более безопасен, так как данные хранятся на стороне сервера, cookies — менее безопасен, так как данные хранятся на стороне клиента. 
Использование: session используется для хранения данных, специфичных для пользователя, cookies — для хранения данных предпочтений пользователя. 
Для работы с базой данных буду использовать MySQL2. MySQL2 — это быстрый, эффективный и богатый функциями клиент MySQL для Node.js. Он обеспечивает высокопроизводительный, неблокирующий и масштабируемый интерфейс для работы с базами данных MySQL в приложениях Node.js.
Некоторые возможности MySQL2:
•	Улучшенная производительность. Благодаря асинхронным операциям приложение Node.js может продолжать выполнять другие задачи, ожидая завершения запросов к базе данных, что приводит к более быстрому ответу.
•	Повышенная безопасность. MySQL2 предоставляет такие функции, как подготовленные заявления и параметризованные запросы, чтобы помочь предотвратить атаки SQL-инъекций, обеспечивая безопасность данных. 
•	Поддержка Promises. MySQL2 поддерживает Promises, что позволяет работать с более элегантным и читаемым асинхронным кодом. 
•	Поддержка потоков. MySQL2 позволяет передавать большие наборы данных напрямую из базы данных, что снижает потребление памяти и улучшает общую производительность при работе с большими объёмами данных. 
•	Управление несколькими подключениями. С помощью MySQL2 можно легко управлять несколькими подключениями к базам данных, что делает его подходящим для приложений, требующих одновременного доступа к базам данных.
Для шифрования пароля будет использоваться BCrypt. BCrypt в Node.js — это библиотека для хэширования и шифрования паролей. Она позволяет создавать хэш из строки пароля и сохранять его в базе данных. 
Когда пользователь отправляет пароль, он хэшируется, а приложение Node.js сохраняет хэш. Позже, когда пользователь хочет аутентифицировать свою учётную запись, нужно сравнить ввод пароля с сохранённым хэшем. 
1.3	Клиентская часть.
Для страниц я будет выступать HTML с EJS представлением. Для работоспособности сайта будет использоваться JavaScript. Для стилизации и оформления страницы будет использоваться CSS.
HTML (HyperText Markup Language) — это язык гипертекстовой разметки, который используется для создания и структурирования веб-страниц. 
Он помогает определять, как содержимое страницы должно отображаться в браузерах. Иными словами, HTML — это своеобразный каркас, на котором строится страница, включая текст, изображения, ссылки и другие элементы. 
Основная цель HTML — структурировать и оформлять контент на сайте. HTML создаёт иерархическую структуру веб-страницы, используя заголовки, абзацы, списки и таблицы. Такая структура помогает пользователю легче ориентироваться на сайте. 
С помощью HTML можно:
1.	делать текстовую разметку — форматировать текст, выделять фрагменты, создавать списки, добавлять сноски; 
2.	встраивать медиа — размещать на сайте изображения, аудио, видео, карты; 
3.	создавать ссылки и навигацию — гиперссылки и списки меню помогают быстрее найти информацию и сориентироваться на странице; 
4.	создавать таблицы — нередко информацию удобно представить в табличном виде; 
5.	создавать формы — формы нужны для регистрации посетителей сайта по телефону и электронной почте, оформления заказов, опросов и сбора обратной связи — отзывов, комментариев, предложений. 
CSS — это код, который позволяет визуально оформить страницу: раскрасить подзаголовки, поменять фон или отформатировать изображение. CSS — важная часть фронтенд-разработки и один из ключевых навыков для веб-разработчика.
Некоторые задачи, которые решает CSS:
•	Оформление текста. С помощью CSS можно задать цвет, размер шрифта, выравнивание, высоту строки и т. д. 
•	Оформление HTML-элементов. Можно задать размеры, отступы, цвет фона, тени, скругления. 
•	Построение сеток для расположения контента. Система сеток позволяет контенту быть уложенным как по вертикали, так и по горизонтали. 
•	Создание анимации. С CSS можно создавать красивые анимации без использования JavaScript. 
•	Создание адаптивного дизайна. Можно менять отображение в зависимости от размеров устройства, на котором просматривают сайт.
Bootstrap — бесплатный CSS-фреймворк с открытым исходным кодом, предназначенный для быстрой вёрстки адаптивных интерфейсов сайтов и веб-приложений с упором на мобильные устройства. Это набор CSS- и JavaScript-файлов с готовыми шаблонами для создания дизайна. Некоторые возможности Bootstrap: 
	инструменты для создания макетов — гибкие медиа-объекты, оберточные контейнеры и системы сеток;
	библиотеки классов для стилизации базового контента — текста, изображений, кода и таблиц;
	готовые элементы — кнопки, тултипы, карусели, формы, навигационные панели, слайдеры, выпадающие списки, аккордеоны, модальные окна, всплывающие подсказки и другие;
	утилитарные классы для решения частых проблем — отображение и скрытие элементов, выравнивание текста, задание цвета, тени, фона, отступов и так далее.
Преимущество Bootstrap:
- Ускорение процесса вёрстки — от разработчика требуется только сделать HTML-макет и присвоить ему нужные классы, что экономит время на написание CSS-свойств и JavaScript-кода.
- Кроссбраузерность и кроссплатформенность — сайты, созданные с помощью Bootstrap, корректно отображаются во всех поддерживаемых браузерах и операционных системах.
- Гибкая настройка — с помощью изменения SCSS-переменных и использования миксинов можно адаптировать дизайн под конкретный проект — настроить количество колонок, цвета, скругления, отступы и многое другое.
- Низкий порог входа — для работы с Bootstrap достаточно базовых знаний HTML, CSS, JavaScript и jQuery — глубокое знание этих технологий не требуется.
- Единый стиль оформления — все компоненты выполнены в согласованном стиле, что обеспечивает однородность дизайна интерфейса.
1.4	Графическая составляющая.  
А также для моей работы будет использоваться программы Krita и Figma
для создания графики.
> Krita — это бесплатный редактор растровой графики с открытым исходным кодом, предназначенный в первую очередь для цифрового искусства и 2D-анимации. 
Программа предоставляет широкий набор инструментов для создания цифрового искусства, иллюстраций, концепт-артов, комиксов и многого другого. Krita поддерживает как растровую, так и векторную графику, предлагает настраиваемый интерфейс и включает продвинутые функции, такие как движки кистей, управление слоями и инструменты управления цветом. 
Будет использоваться для создания астровой графики. 
> Figma — это инструмент для дизайна интерфейсов, который позволяет создавать, редактировать и совместно работать над проектами в режиме реального времени.
В нём можно разрабатывать различные интерфейсы и прототипы цифровых продуктов, создавать векторные объекты, двух- и трёхмерные иллюстрации.
Будет использоваться для создания векторной графики. 
 
II. РАЗРАБОТКА ПРОГРАММНОГО ПРОДУКТА.
